git config --global user.name “xxxx”  用户名
git config --global user.email “xxxx”  邮箱  便于其他用户分别

pwd  显示当前目录地址

ls -ah 查看当前目录内容

git init  建立git仓库

git add 
git commit  -m “xxxx” 添加 （xxxx为添加日志信息）

git status  查看状态

git diff XXXX.XX  查看具体修改内容

git log  查看历史记录
git log --pretty=oneline 单行查看免去不必要的信息

git reset --hard HEAD^  回退一个版本
git reset --hard HEAD^^  回退两个版本
git reset --hard HEAD~100  回退100个版本
git reset --hard 87asdf897 返回到某个版本（回到过去版本后如果还可以看到之前的较新版本号 则输入几位即可返回）

git reflog 记录每一条操作命令

git add 将修改添加到一个暂缓区，但是并没有实际对库分支进行修改。   所以git add 之后 再次手动修改了文件再直接commit并不会提交当前已经修改的文件，而是前面交到暂缓区的修改内容的记录。

git checkout -- xxx.xx 针对未使用add指令添加到暂缓区的文件会丢弃当前的修改
对于已经提交到暂缓区的文件  可以使用git reset HEAD xxx.xx 指令使得其取消放入暂缓区，然后可以再使用上述指令彻底放弃此次编辑，文件回到未修改状态

rm xxxx.xx 删除本地文件
若文件被添加到版本库中，则再使用git rm xxxx.xx删掉再使用git commit操作完成彻底删除
若文件被添加到版本库中，但是操作误删本地文件，则可以使用git checkout -- xxxx.xx恢复
git checkout其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”

远程仓库
$ ssh-keygen -t rsa -C "xxxxemailaddressxxxx" 创建SSH Key
在Github上面新添SSH Key 使用内容为本地用户目录里面.ssh下面的id_rsa.pub里面的内容
继而在Github上面新建一个Repository 创建好之后会有提示操作本地工作空间去连接上传内容
比如：
git remote add origin https://github.com/souldancer89757/test1.git
git push -u origin master

之后使用git push origin master即可实现提交到github库  不用-u是因为初次上传时使用了即完成了本地与远程库的连接，故之后不用再加上-u

github给出的地址有两种https的和ssh的  前者慢而且需要每次输入口令，但是某些公司只开放http端口的内部就只能使用https了